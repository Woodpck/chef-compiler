class LexicalAnalyzer:
    def __init__(self):
        self.whitespace = {' ', '\t', '\n'}

        self.alpha_big = set("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        self.alpha_small = set("abcdefghijklmnopqrstuvwxyz")
        self.number = set("0123456789")
        self.all_alpha = self.alphabet | self.number
        self.bool_delim = {';'}
        self.asciicmnt = {chr(i) for i in range(32, 127) if chr(i) not in {'/', '*'}}
        self.asciistr = {chr(i) for i in range(32, 127) if chr(i) != '"'}
        self.asciichr = {chr(i) for i in range(32, 127) if chr(i) != "'"}
        self.strdelim = {',', ';', ' ', ':', ')', '}', '+'}
        self.letterdelim = {' ', ';', ',', ':', '}', ')'}
        self.space_delim = {' '}
        self.semicolon_delim = {';'}
        self.colon_delim = {':'}
        
        self.dt_delim = {' ', '\t'}
        self.opdelim = {'+', '-', '*', '/', '%', '**'}
        self.id_delim = {' ', ';', ',', '.', '(', ')', '{', '[', ']'} | self.opdelim
        self.digdelim = {' ', ';', ':', ',', '}', ')', ']'} | self.opdelim
        self.pardelim = {'('}
        self.dtdelim = {' '}

        self.delim0 = {' ', '('}
        self.delim1 = { }
        self.delim3 = {' ', ')', ';', ','}
        self.delim4 = {' ', ';', ')'} | self.all_alpha
        self.delim5 = {' ', '~', '('} | self.all_alpha
        self.delim6 = {' ', '\n'}
        self.delim7 = {' ', '"', '('} | self.all_alpha
        self.delim6 = {' ', '\n'}
        self.delim9 = {'\n'}
        self.delim10 = {' ', '~', '"', '\'', '('} | self.all_alpha
        self.delim11 = {'"', '~', '\'', ' '} | self.all_alpha
        self.delim12 = {')', '!', '\'', '"', ' '} | self.all_alpha
        self.delim13 = {';', '{', ')', '<', '>', '=', '|', '&', '+', '-', '/', '*', '%', ' '}
        self.delim14 = {']', ' '} | self.all_alpha
        self.delim15 = {'=', ';', ' ', '\n', '['}
        self.delim16 = {'\'', '"', '~', ' ', '\n', '{'} | self.all_alpha
        self.delim17 = {';', '}', ',', ' ', '\n'} | self.alpha_big
        
        self.errors = []
        self.code = ""
        self.index = 0
        self.line_number = 1

    def nextChar(self):
            if self.index < len(self.code):
                c = self.code[self.index]
                self.index += 1
                return c
            return None
        
    def stepBack(self):
            if self.index > 0:
                self.index -= 1

    def tokenize(self, code):
        self.code = code
        tokens = []
        self.index = 0
        state = 0
        lexeme = ""
        line = 1

        while True:
            c = self.nextChar()

            if c is None and state == 0:
                break
            
            print(f"State: {state}, char: {repr(c)}, Lexeme: {repr(lexeme)}, Line: {line}")
            
            match state:
                case 0:
                    lexeme = ""
                    
                    if c == 'b':
                        state = 1
                        lexeme += 'b'
                    elif c == 'c':
                        state = 10
                        lexeme += 'c'
                    elif c == 'd':
                        state = 22
                        lexeme += 'd'
                    elif c == 'e':
                        state = 39
                        lexeme += 'e'
                    elif c == 'f':
                        state = 44
                        lexeme += 'f'
                    elif c == 'h':
                        state = 56
                        lexeme += 'h'
                    elif c == 'k':
                        state = 63
                        lexeme += 'k'
                    elif c == 'm':
                        state = 71
                        lexeme += 'm'
                    elif c == 'p':
                        state = 79
                        lexeme += 'p'
                    elif c == 'r':
                        state = 90
                        lexeme += 'r'
                    elif c == 's':
                        state = 97
                        lexeme += 's'
                    elif c == 't':
                        state = 117
                        lexeme += 't'
                    elif c == 'y':
                        state = 129
                        lexeme += 'y'
                    elif c == ' ':
                        state = 133
                        lexeme += ' '
                    elif c == '\t':
                        state = 135
                        lexeme += '\t'
                    elif c == '\n':
                        state = 137
                        lexeme += '\n'
                        line += 1
                    elif c == '-':
                        state = 139
                        lexeme += '-'
                    elif c == '.':
                        state = 145
                        lexeme += '.'
                    elif c == '!':
                        state = 147
                        lexeme += '!'
                    elif c == '?':
                        state = 153
                        lexeme += '?'
                    elif c == '(':
                        state = 156
                        lexeme += '('
                    elif c == ')':
                        state = 158
                        lexeme += ')'
                    elif c == '[':
                        state = 160
                        lexeme += '['
                    elif c == ']':
                        state = 162
                        lexeme += ']'
                    elif c == '{':
                        state = 164
                        lexeme += '{'
                    elif c == '}':
                        state = 166
                        lexeme += '}'
                    elif c == '.':
                        state = 168
                        lexeme += '.'
                    elif c == '':
                        state = 156
                        lexeme += ''
                        
                    elif c in self.alpha_small:
                        state = 252
                        lexeme += c
                    
                        
                
                case 1:
                    if c == 'l':
                        state = 2
                        lexeme += c
                    elif c == 'o':
                        state = 6
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 2:
                    if c == 'e':
                        state = 3
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 3:
                    if c == 'h':
                        state = 4
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 4:
                    if c in self.bool_delim:
                        state = 5
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 5:
                    tokens.append((lexeme, "bleh"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 6:
                    if c == 'o':
                        state = 7
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 7:
                    if c == 'l':
                        state = 8
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 8:
                    if c in self.bool_delim:
                        state = 9
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 9:
                    tokens.append((lexeme, "bool"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                
                case 10:
                    if c == 'a':
                        state = 11
                        lexeme += c
                    elif c == 'h':
                        state = 15
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 11:
                    if c == 's':
                        state = 12
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 12:
                    if c == 'e':
                        state = 13
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 13:
                    if c in self.delim4:
                        state = 14
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 14:
                    tokens.append((lexeme, "case"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                
                case 15:
                    if c == 'e':
                        state = 16
                        lexeme += c
                    elif c == 'o':
                        state = 19
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0

                case 16:
                    if c == 'f':
                        state = 17
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 17:
                    if c in self.space_delim:
                        state = 18
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 18:
                    tokens.append((lexeme, "chef"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                
                case 19:
                    if c == 'p':
                        state = 20
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 20:
                    if c in self.semicolon_delim:
                        state = 21
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 21:
                    tokens.append((lexeme, "chop"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 22:
                    if c == 'e':
                        state = 23
                        lexeme += c
                    elif c == 'i':
                        state = 30
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 23:
                    if c == 'f':
                        state = 24
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 24:
                    if c == 'a':
                        state = 25
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 25:
                    if c == 'u':
                        state = 26
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 26:
                    if c == 'l':
                        state = 27
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 27:
                    if c == 't':
                        state = 28
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 28:
                    if c in self.colon_delim:
                        state = 29
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 29:
                    tokens.append((lexeme, "default"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 30:
                    if c == 'n':
                        state = 31
                        lexeme += c
                    elif c == 's':
                        state = 36
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 31:
                    if c == 'e':
                        state = 32
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 32:
                    if c == 'i':
                        state = 33
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 33:
                    if c == 'n':
                        state = 34
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 34:
                    if c in self.delim9:
                        state = 35
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 35:
                    tokens.append((lexeme, "dinein"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 36:
                    if c == 'h':
                        state = 37
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 37:
                    if c in self.delim0:
                        state = 38
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 38:
                    tokens.append((lexeme, "dish"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                
                case 39:
                    if c == 'l':
                        state = 40
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 40:
                    if c == 'i':
                        state = 41
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 41:
                    if c == 'f':
                        state = 42
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 42:
                    if c in self.delim0:
                        state = 43
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 43:
                    tokens.append((lexeme, "elif"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 44:
                    if c == 'l':
                        state = 45
                        lexeme += c
                    elif c == 'o':
                        state = 49
                        lexeme += c
                    elif c == 'u':
                        state = 52
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 45:
                    if c == 'i':
                        state = 46
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 46:
                    if c == 'p':
                        state = 47
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 47:
                    if c in self.delim0:
                        state = 48
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 48:
                    tokens.append((lexeme, "flip"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 49:
                    if c == 'r':
                        state = 50
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 50:
                    if c in self.delim0:
                        state = 51
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 51:
                    tokens.append((lexeme, "for"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 52:
                    if c == 'l':
                        state = 53
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 53:
                    if c == 'l':
                        state = 54
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 54:
                    if c in self.id_delim:
                        state = 55
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 55:
                    tokens.append((lexeme, "full"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 56:
                    if c == 'u':
                        state = 57
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 57:
                    if c == 'n':
                        state = 58
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 58:
                    if c == 'g':
                        state = 59
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 59:
                    if c == 'r':
                        state = 60
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 60:
                    if c == 'y':
                        state = 61
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 61:
                    if c in self.space_delim:
                        state = 62
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 62:
                    tokens.append((lexeme, "hungry"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 63:
                    if c == 'e':
                        state = 64
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 64:
                    if c == 'e':
                        state = 65
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 65:
                    if c == 'p':
                        state = 66
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 66:
                    if c == 'm':
                        state = 67
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 67:
                    if c == 'i':
                        state = 68
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 68:
                    if c == 'x':
                        state = 69
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 69:
                    if c in self.delim2:
                        state = 70
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 70:
                    tokens.append((lexeme, "keepmix"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 71:
                    if c == 'a':
                        state = 72
                        lexeme += c
                    elif c == 'i':
                        state = 76
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 72:
                    if c == 'k':
                        state = 73
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 73:
                    if c == 'e':
                        state = 74
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 74:
                    if c in self.delim0:
                        state = 75
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 75:
                    tokens.append((lexeme, "make"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 76:
                    if c == 'x':
                        state = 77
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 77:
                    if c in self.delim2:
                        state = 78
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 78:
                    tokens.append((lexeme, "mix"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                        
                case 79:
                    if c == 'a':
                        state = 80
                        lexeme += c
                    elif c == 'i':
                        state = 85
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 80:
                    if c == 's':
                        state = 81
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 81:
                    if c == 't':
                        state = 82
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 82:
                    if c == 'a':
                        state = 83
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 83:
                    if c in self.delim8:
                        state = 84
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 84:
                    tokens.append((lexeme, "pasta"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 85:
                    if c == 'n':
                        state = 86
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 86:
                    if c == 'c':
                        state = 87
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 87:
                    if c == 'h':
                        state = 88
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 88:
                    if c in self.id_delim:
                        state = 89
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 89:
                    tokens.append((lexeme, "pinch"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                        
                case 90:
                    if c == 'e':
                        state = 91
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 91:
                    if c == 'c':
                        state = 92
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 92:
                    if c == 'i':
                        state = 93
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 93:
                    if c == 'p':
                        state = 94
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 94:
                    if c == 'e':
                        state = 95
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 95:
                    if c in self.id_delim:
                        state = 96
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 96:
                    tokens.append((lexeme, "recipe"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                
                case 97:
                    if c == 'e':
                        state = 98
                        lexeme += c
                    elif c == 'i':
                        state = 103
                        lexeme += c
                    elif c == 'k':
                        state = 109
                        lexeme += c
                    elif c == 'p':
                        state = 113
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 98:
                    if c == 'r':
                        state = 99
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 99:
                    if c == 'v':
                        state = 100
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 100:
                    if c == 'e':
                        state = 101
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 101:
                    if c in self.delim0:
                        state = 102
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 102:
                    tokens.append((lexeme, "serve"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 103:
                    if c == 'm':
                        state = 104
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 104:
                    if c == 'm':
                        state = 105
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 105:
                    if c == 'e':
                        state = 106
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 106:
                    if c == 'r':
                        state = 107
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 107:
                    if c in self.delim0:
                        state = 108
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 108:
                    tokens.append((lexeme, "simmer"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                        
                case 109:
                    if c == 'i':
                        state = 110
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 110:
                    if c == 'm':
                        state = 111
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 111:
                    if c in self.delim0:
                        state = 112
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 112:
                    tokens.append((lexeme, "skim"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 113:
                    if c == 'i':
                        state = 114
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 114:
                    if c == 't':
                        state = 115
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 115:
                    if c in self.delim4:
                        state = 116
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 116:
                    tokens.append((lexeme, "spit"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 117:
                    if c == 'a':
                        state = 118
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 118:
                    if c == 'k':
                        state = 119
                        lexeme += c
                    elif c == 's':
                        state = 125
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 119:
                    if c == 'e':
                        state = 120
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 120:
                    if c == 'o':
                        state = 121
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 121:
                    if c == 'u':
                        state = 122
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 122:
                    if c == 't':
                        state = 123
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 123:
                    if c in self.delim9:
                        state = 124
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 124:
                    tokens.append((lexeme, "takeout"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 125:
                    if c == 't':
                        state = 126
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 126:
                    if c == 'e':
                        state = 127
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 127:
                    if c in self.delim0:
                        state = 128
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 128:
                    tokens.append((lexeme, "taste"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 129:
                    if c == 'u':
                        state = 130
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 130:
                    if c == 'm':
                        state = 131
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                    
                case 131:
                    if c in self.bool_delim:
                        state = 132
                        lexeme += c
                    elif c and (c.isalpha() or c.isdigit() or c == '_'):
                        state = 254
                        lexeme += c
                    else:
                        self.errors.append(f"Line {line}: '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 132:
                    tokens.append((lexeme, "yum"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                
                    
                    
                
                        
                        
                    
                #Identifier pinch a;
                case 252:
                    if c and (c.isalpha() or c.isdigit() or c == '_'):
                        lexeme += c
                        state = 254                        
                    elif c in self.id_delim:
                        state = 253
                        if c is not None:
                            self.stepBack()
                    else:
                        self.errors.append(f"Line {line}: Identifier '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                        
                case 253:
                    tokens.append((lexeme, "identifier"))
                    if c is not None:
                        self.stepBack()
                    state = 0
                    
                case 254:
                    if c and (c.isalpha() or c.isdigit() or c == '_'):
                        lexeme += c
                        
                        if len(lexeme) > 20:
                            self.errors.append(f"Line {line}: Identifier '{lexeme}' exceeds 20 characters.")
                            state = 0

                    elif c in self.id_delim:
                        state = 255
                        if c is not None:
                            self.stepBack()
                    
                    else:
                        if c is None:
                            self.errors.append(f"Line {line}: Identifier '{lexeme}' Invalid Delimiter.")
                        else:
                            self.errors.append(f"Line {line}: Identifier '{lexeme}' Invalid Delimiter ' {repr(c)} '.")
                        state = 0
                
                case 255:
                    tokens.append((lexeme, "identifier"))
                    if c is not None:
                        self.stepBack()
                    state = 0 
                    
        return tokens
     
    
    


    def display_tokens(self, tokens):
            print(f"{'Lexeme'.ljust(40)}{'Token'.ljust(20)}")
            print("-" * 60)
            for lexeme, token in tokens:
                print(f"{lexeme.ljust(40)}{token.ljust(20)}")
                print("-" * 60)


    def display_errors(self):
        if self.errors:
            print("\nLexical Errors:\n")
            for error in self.errors:
                    print(error)

if __name__ == "__main__":
    try:
        with open("program", "r") as file:
            code = file.read()
    except FileNotFoundError:
        print("Error: The file 'program' was not found in the current directory.")
        exit(1)

    analyzer = LexicalAnalyzer()
    tokens = analyzer.tokenize(code)

    analyzer.display_tokens(tokens)
    analyzer.display_errors()
    print("\nEnd of program analysis.\n")   